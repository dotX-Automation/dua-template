# Workflow to sync the DUA template with the latest version.
#
# Roberto Masocco <r.masocco@dotxautomation.com>
#
# June 13, 2024

# Steps:
# - Clone this repository and checkout a default branch
# - Copy files from the template onto this clone
# - Push the branch to this repository
# - Create a pull request

name: Sync DUA template

on:
  # Run every day at 00:01
  schedule:
    - cron: "1 0 * * *"

  # Run when this file changes
  push:
    paths:
      - .github/workflows/sync-dua-template.yaml

  # Run when manually triggered
  workflow_dispatch:

env:
  BASE_BRANCH: master
  HEAD_BRANCH: chore/sync-dua-template
  GIT_AUTHOR_NAME: ${{ github.repository_owner }}
  GIT_AUTHOR_EMAIL: ${{ github.repository_owner }}@users.noreply.github.com
  REPO_TEMPLATE: dotX-Automation/dua-template
  THIS_REPO: ${{ github.repository }}

jobs:
  sync-dua-template:
    # Do not run on the template repository itself
    if: github.repository != env.REPO_TEMPLATE

    name: Sync DUA template
    runs-on: ubuntu-latest
    continue-on-error: false

    steps:
      # Clone the template repository
      - name: Check out template repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_TEMPLATE }}
          ref: 'master'
          token: ${{ github.token }}
          path: ${{ env.REPO_TEMPLATE }}

      # Clone the target repository and checkout a branch
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: env.BASE_BRANCH
          token: ${{ github.token }}
          path: ${{ github.repository }}
      - name: Create branch in ${{ env.THIS_REPO }}
        run: |
          git -C "${THIS_REPO}" fetch origin "${HEAD_BRANCH}" || true
          git -C "${THIS_REPO}" branch -a
          git -C "${THIS_REPO}" checkout -B "${HEAD_BRANCH}" \
            "remotes/origin/${HEAD_BRANCH}" || \
          git -C "${THIS_REPO}" checkout -b "${HEAD_BRANCH}"

      # Copy files from the template onto the target clone
      - name: Copy template contents
        run: |
          _files="$(find ${REPO_TEMPLATE} \
            ! -path "*/.git/*" \
            ! -path "*/.github/workflows/*" \
            ! -name ".gitignore" \
            ! -name "README.md" \
            -type f \
            -print)"
          for _file in ${_files}; do
            _src="${_file}"
            _dst="${THIS_REPO}/${_file#${REPO_TEMPLATE}/}"
            _dst="${_dst%/*}/"
            mkdir -p "${_dst}"
            echo "INFO: Copy '${_src}' to '${_dst}'"
            cp "${_src}" "${_dst}"
          done
          git -C "${THIS_REPO}" diff

      # Commit changes, if there are any
      - name: Commit changes, if any
        run: |
          git -C ${THIS_REPO} config user.name "${GIT_AUTHOR_NAME}"
          git -C ${THIS_REPO} config user.email "${GIT_AUTHOR_EMAIL}"
          git -C ${THIS_REPO} add .
          git -C ${THIS_REPO} commit -m "Sync from template@${{ github.sha }}"

      # Push the branch to the target repository
      - name: Push new branch
        run: git -C ${THIS_REPO} push -u origin "${HEAD_BRANCH}"

      # Create a pull request in the target repository
      - name: Create pull request
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_USER: ${{ github.actor }}
        run: |
          pushd ${THIS_REPO}
          hub pull-request \
            -b "${BASE_BRANCH}" \
            -h "${HEAD_BRANCH}" \
            --no-edit \
            -m "Pull updates from ${REPO_TEMPLATE}" \
            -m "Pull updates from ${REPO_TEMPLATE}"
          popd
